// Code generated by moshi-kotlin-codegen. Do not edit.
package at.fh.swengb.windisch

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class NoteJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Note>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "title", "text", "toUpload")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "toUpload")

  override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Note").append(')') }

  override fun fromJson(reader: JsonReader): Note {
    var id: String? = null
    var title: String? = null
    var text: String? = null
    var toUpload: Boolean? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        2 -> text = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("text", "text",
            reader)
        3 -> toUpload = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("toUpload",
            "toUpload", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Note(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        title = title ?: throw Util.missingProperty("title", "title", reader),
        text = text ?: throw Util.missingProperty("text", "text", reader),
        toUpload = toUpload ?: throw Util.missingProperty("toUpload", "toUpload", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: Note?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value.id)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("text")
    stringAdapter.toJson(writer, value.text)
    writer.name("toUpload")
    booleanAdapter.toJson(writer, value.toUpload)
    writer.endObject()
  }
}
