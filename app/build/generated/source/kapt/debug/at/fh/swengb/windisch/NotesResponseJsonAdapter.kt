// Code generated by moshi-kotlin-codegen. Do not edit.
package at.fh.swengb.windisch

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class NotesResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<NotesResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("lastSync", "notes")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "lastSync")

  private val listOfNoteAdapter: JsonAdapter<List<Note>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Note::class.java), emptySet(),
      "notes")

  override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("NotesResponse").append(')') }

  override fun fromJson(reader: JsonReader): NotesResponse {
    var lastSync: Long? = null
    var notes: List<Note>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> lastSync = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lastSync",
            "lastSync", reader)
        1 -> notes = listOfNoteAdapter.fromJson(reader) ?: throw Util.unexpectedNull("notes",
            "notes", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return NotesResponse(
        lastSync = lastSync ?: throw Util.missingProperty("lastSync", "lastSync", reader),
        notes = notes ?: throw Util.missingProperty("notes", "notes", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: NotesResponse?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("lastSync")
    longAdapter.toJson(writer, value.lastSync)
    writer.name("notes")
    listOfNoteAdapter.toJson(writer, value.notes)
    writer.endObject()
  }
}
